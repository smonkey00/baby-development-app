import { AssessmentResult, AssessmentStatus, BabyInfo, ScoreLevel } from "./types";
import { getAISuggestion, getNutritionAdvice, getExerciseAdvice, getSleepAdvice } from "./api";

// WHO standard growth charts data (simplified for this example)
const maleHeightAverage: Record<number, number> = {
  0: 49.9, 1: 54.7, 2: 58.4, 3: 61.4, 4: 63.9, 5: 65.9, 6: 67.6, 
  7: 69.2, 8: 70.6, 9: 72.0, 10: 73.3, 11: 74.5, 12: 75.7,
  13: 76.9, 14: 78.0, 15: 79.1, 16: 80.2, 17: 81.2, 18: 82.3,
  19: 83.2, 20: 84.2, 21: 85.1, 22: 86.0, 23: 86.9, 24: 87.8,
  36: 96.1, 48: 102.9, 60: 109.9
};

const femaleHeightAverage: Record<number, number> = {
  0: 49.1, 1: 53.7, 2: 57.1, 3: 59.8, 4: 62.1, 5: 64.0, 6: 65.7, 
  7: 67.3, 8: 68.7, 9: 70.1, 10: 71.5, 11: 72.8, 12: 74.0,
  13: 75.2, 14: 76.4, 15: 77.5, 16: 78.6, 17: 79.7, 18: 80.7,
  19: 81.7, 20: 82.7, 21: 83.7, 22: 84.6, 23: 85.5, 24: 86.4,
  36: 95.1, 48: 101.6, 60: 108.4
};

const maleWeightAverage: Record<number, number> = {
  0: 3.3, 1: 4.5, 2: 5.6, 3: 6.4, 4: 7.0, 5: 7.5, 6: 7.9, 
  7: 8.3, 8: 8.6, 9: 8.9, 10: 9.2, 11: 9.4, 12: 9.6,
  13: 9.9, 14: 10.1, 15: 10.3, 16: 10.5, 17: 10.7, 18: 10.9,
  19: 11.1, 20: 11.3, 21: 11.5, 22: 11.8, 23: 12.0, 24: 12.2,
  36: 14.3, 48: 16.3, 60: 18.3
};

const femaleWeightAverage: Record<number, number> = {
  0: 3.2, 1: 4.2, 2: 5.1, 3: 5.8, 4: 6.4, 5: 6.9, 6: 7.3, 
  7: 7.6, 8: 7.9, 9: 8.2, 10: 8.5, 11: 8.7, 12: 8.9,
  13: 9.2, 14: 9.4, 15: 9.6, 16: 9.8, 17: 10.0, 18: 10.2,
  19: 10.4, 20: 10.6, 21: 10.9, 22: 11.1, 23: 11.3, 24: 11.5,
  36: 13.9, 48: 15.9, 60: 17.9
};

// Helper function to get the closest age data point
const getClosestAge = (age: number | '', maxAge: number = 60): number => {
  const ageNum = Number(age);
  if (!ageNum || isNaN(ageNum)) return 12; // Default to 12 months if invalid
  if (ageNum <= 24) return ageNum;
  if (ageNum > maxAge) return maxAge;
  
  // For ages 25-60, find the closest benchmark (24, 36, 48, 60)
  const benchmarks = [24, 36, 48, 60];
  return benchmarks.reduce((prev, curr) => 
    Math.abs(curr - ageNum) < Math.abs(prev - ageNum) ? curr : prev
  );
};

// Assess height relative to average
export const assessHeight = (baby: BabyInfo): AssessmentStatus => {
  const averageHeights = baby.gender === 'male' ? maleHeightAverage : femaleHeightAverage;
  const closestAge = getClosestAge(baby.age);
  const averageHeight = averageHeights[closestAge];
  const height = Number(baby.height);
  
  if (!height || isNaN(height)) return 'normal';
  
  const heightDiff = ((height - averageHeight) / averageHeight) * 100;
  
  if (heightDiff > 15) return 'high';
  if (heightDiff > 5) return 'slightly-high';
  if (heightDiff >= -5) return 'normal';
  if (heightDiff >= -15) return 'slightly-low';
  return 'low';
};

// Assess weight relative to average
export const assessWeight = (baby: BabyInfo): AssessmentStatus => {
  const averageWeights = baby.gender === 'male' ? maleWeightAverage : femaleWeightAverage;
  const closestAge = getClosestAge(baby.age);
  const averageWeight = averageWeights[closestAge];
  const weight = Number(baby.weight);
  
  if (!weight || isNaN(weight)) return 'normal';
  
  const weightDiff = ((weight - averageWeight) / averageWeight) * 100;
  
  if (weightDiff > 20) return 'high';
  if (weightDiff > 7) return 'slightly-high';
  if (weightDiff >= -7) return 'normal';
  if (weightDiff >= -20) return 'slightly-low';
  return 'low';
};

// Calculate overall development score
export const calculateScore = (heightStatus: AssessmentStatus, weightStatus: AssessmentStatus): number => {
  // Base score is 75
  let score = 75;
  
  // Add or subtract points based on status
  const statusScores: Record<AssessmentStatus, number> = {
    'high': 5,
    'slightly-high': 10, 
    'normal': 15,
    'slightly-low': 5,
    'low': 0
  };
  
  score += statusScores[heightStatus];
  score += statusScores[weightStatus];
  
  // Ensure score is between 0 and 100
  return Math.min(100, Math.max(0, score));
};

// Get score level based on score value
export const getScoreLevel = (score: number): ScoreLevel => {
  if (score >= 90) {
    return {
      level: 'excellent',
      emoji: 'üéâ',
      color: 'bg-gradient-to-r from-green-400 to-emerald-500',
      description: 'ÈùûÂ∏∏Ê£íÔºåË¶Å‰øùÊåÅÂì¶'
    };
  } else if (score >= 75) {
    return {
      level: 'good',
      emoji: 'üí™',
      color: 'bg-gradient-to-r from-blue-400 to-indigo-500',
      description: 'ËøòÂèØ‰ª•Âì¶ÔºåÁªßÁª≠Âä†Ê≤π'
    };
  } else if (score >= 60) {
    return {
      level: 'average',
      emoji: 'üò¨',
      color: 'bg-gradient-to-r from-amber-400 to-orange-500',
      description: 'ÂÜç‰∏çÂä™ÂäõÂ∞±Ë∑ü‰∏ç‰∏ä‰∫ÜÂì¶'
    };
  } else {
    return {
      level: 'below-average',
      emoji: 'üê¢',
      color: 'bg-gradient-to-r from-red-400 to-pink-500',
      description: 'Ë¶ÅÂä†Ê≤π‰∫Ü'
    };
  }
};

// Get average data for reference
export const getAverageData = (baby: BabyInfo) => {
  const closestAge = getClosestAge(baby.age);
  
  return {
    height: baby.gender === 'male' 
      ? maleHeightAverage[closestAge] 
      : femaleHeightAverage[closestAge],
    weight: baby.gender === 'male' 
      ? maleWeightAverage[closestAge] 
      : femaleWeightAverage[closestAge]
  };
};

// Status to display text mapping
export const statusToText: Record<AssessmentStatus, string> = {
  'high': 'ÂÅèÈ´ò',
  'slightly-high': 'Á®çÈ´ò',
  'normal': 'Ê†áÂáÜ',
  'slightly-low': 'Á®ç‰Ωé',
  'low': 'ÂÅè‰Ωé'
};

// Status to color mapping
export const statusToColor: Record<AssessmentStatus, string> = {
  'high': 'text-pink-500',
  'slightly-high': 'text-rose-400',
  'normal': 'text-green-500',
  'slightly-low': 'text-amber-500',
  'low': 'text-red-500'
};

// Generate a complete assessment
export const generateAssessment = async (baby: BabyInfo): Promise<AssessmentResult> => {
  const heightStatus = assessHeight(baby);
  const weightStatus = assessWeight(baby);
  const score = calculateScore(heightStatus, weightStatus);
  
  try {
    const suggestion = await getAISuggestion(baby);
    return {
      score,
      heightStatus,
      weightStatus,
      suggestion
    };
  } catch (error) {
    console.error('Error getting AI suggestion:', error);
    return {
      score,
      heightStatus,
      weightStatus,
      suggestion: getDefaultSuggestion(baby, heightStatus, weightStatus)
    };
  }
};

// Generate advice for specific modules
export const generateAdviceModules = async (baby: BabyInfo) => {
  try {
    const [nutritionAdvice, exerciseAdvice, sleepAdvice] = await Promise.all([
      getNutritionAdvice(baby),
      getExerciseAdvice(baby),
      getSleepAdvice(baby)
    ]);

    return {
      nutritionAdvice,
      exerciseAdvice,
      sleepAdvice
    };
  } catch (error) {
    console.error('Error getting advice modules:', error);
    return {
      nutritionAdvice: getDefaultNutritionAdvice(baby),
      exerciseAdvice: getDefaultExerciseAdvice(baby),
      sleepAdvice: getDefaultSleepAdvice(baby)
    };
  }
};

// Default advice functions (moved from api.ts for consistency)
const getDefaultNutritionAdvice = (baby: BabyInfo): string => {
  const age = Number(baby.age);
  const name = baby.name;
  
  if (age < 6) {
    return `${name}Ëøô‰∏™Èò∂ÊÆµ‰∏ªË¶Å‰ª•ÊØç‰π≥ÊàñÈÖçÊñπÂ•∂‰∏∫‰∏ªÔºåÊØèÂ§©6-8Ê¨°ÂñÇÂÖª„ÄÇÊ≥®ÊÑèËßÇÂØü${name}ÁöÑÈ•±ËÖπ‰ø°Âè∑ÔºåÊåâÈúÄÂñÇÂÖª„ÄÇÂ¶ÇÊûúÊòØÊØç‰π≥ÂñÇÂÖªÔºåÂ¶àÂ¶àË¶Å‰øùËØÅËê•ÂÖªÂùáË°°„ÄÇ`;
  } else if (age < 12) {
    return `${name}ÂèØ‰ª•ÂºÄÂßãÊ∑ªÂä†ËæÖÈ£ü‰∫ÜÔºÅÂª∫ËÆÆ‰ªéÁ±≥Á≤âÂºÄÂßãÔºåÈÄêÊ≠•Ê∑ªÂä†Ëî¨ËèúÊ≥•„ÄÅÊ∞¥ÊûúÊ≥•„ÄÇÊØèÊ¨°Âè™Ê∑ªÂä†‰∏ÄÁßçÊñ∞È£üÁâ©ÔºåËßÇÂØü3-5Â§©Êó†ËøáÊïèÂèçÂ∫îÂÜçÊ∑ªÂä†‰∏ã‰∏ÄÁßç„ÄÇÂ•∂Èáè‰ªçÊòØ‰∏ªË¶ÅËê•ÂÖªÊù•Ê∫ê„ÄÇ`;
  } else if (age < 24) {
    return `${name}ÂèØ‰ª•Â∞ùËØïÊõ¥Â§öÈ£üÁâ©‰∫ÜÔºÅÂª∫ËÆÆ‰∏âÈ§ê‰∏§ÁÇπÔºåÂåÖÊã¨ËΩØÈ•≠„ÄÅËî¨Ëèú„ÄÅÊ∞¥Êûú„ÄÅËÇâÁ±ª„ÄÇÈÅøÂÖçËúÇËúú„ÄÅÂùöÊûúÁ≠âÊòìËøáÊïèÈ£üÁâ©„ÄÇÈºìÂä±${name}Ëá™Â∑±Áî®ÊâãÊäìÈ£üÔºåÂüπÂÖªËøõÈ£üÂÖ¥Ë∂£„ÄÇ`;
  } else {
    return `${name}ÂèØ‰ª•ÂíåÂÆ∂‰∫∫‰∏ÄËµ∑Áî®È§ê‰∫ÜÔºÅÂª∫ËÆÆËê•ÂÖªÂùáË°°ÔºåÂåÖÂê´Ë∞∑Áâ©„ÄÅËî¨Ëèú„ÄÅÊ∞¥Êûú„ÄÅËõãÁôΩË¥®„ÄÇÊéßÂà∂Èõ∂È£üÂíåÁîúÈ£üÔºåÂüπÂÖª${name}ËâØÂ•ΩÁöÑÈ•ÆÈ£ü‰π†ÊÉØ„ÄÇÊØèÂ§©‰øùËØÅË∂≥Â§üÁöÑÊ∞¥ÂàÜÊëÑÂÖ•„ÄÇ`;
  }
};

const getDefaultExerciseAdvice = (baby: BabyInfo): string => {
  const age = Number(baby.age);
  const name = baby.name;
  
  if (age < 6) {
    return `${name}Ëøô‰∏™Èò∂ÊÆµ‰∏ªË¶ÅÊòØË¢´Âä®ËøêÂä®„ÄÇÂª∫ËÆÆÊØèÂ§©ËøõË°åÂ©¥ÂÑøÊäöËß¶ÂíåË¢´Âä®‰ΩìÊìçÔºå‰øÉËøõ${name}ÁöÑË°ÄÊ∂≤Âæ™ÁéØ„ÄÇÂ§öËÆ©${name}Ë∂¥ÁùÄÁªÉ‰π†Êä¨Â§¥ÔºåÈîªÁÇºÈ¢àÈÉ®ÂíåËÉåÈÉ®ËÇåËÇâ„ÄÇ`;
  } else if (age < 12) {
    return `${name}ÂºÄÂßãÂ≠¶‰ºöÂùêÂíåÁà¨‰∫ÜÔºÅÈºìÂä±${name}Â§öË∂¥ÁùÄÁé©ËÄçÔºåÁªÉ‰π†Áà¨Ë°å„ÄÇÂèØ‰ª•Áî®Áé©ÂÖ∑ÂºïÂØº${name}ÂêëÂâçÁà¨ÔºåÈîªÁÇºÂõõËÇ¢ÂçèË∞ÉÊÄß„ÄÇÊØèÂ§©‰øùËØÅË∂≥Â§üÁöÑËá™Áî±Ê¥ªÂä®Êó∂Èó¥„ÄÇ`;
  } else if (age < 24) {
    return `${name}Ê≠£Âú®Â≠¶Ëµ∞Ë∑ØÔºÅÊèê‰æõÂÆâÂÖ®ÁöÑÁéØÂ¢ÉËÆ©${name}Ëá™Áî±Êé¢Á¥¢„ÄÇÂèØ‰ª•Áé©Êé®ÊãâÁé©ÂÖ∑„ÄÅÁà¨Ê•ºÊ¢Ø„ÄÅË∏¢ÁêÉÁ≠âÊ∏∏Êàè„ÄÇÊØèÂ§©Êà∑Â§ñÊ¥ªÂä®1-2Â∞èÊó∂Ôºå‰øÉËøõ${name}Â§ßËøêÂä®ÂèëÂ±ï„ÄÇ`;
  } else {
    return `${name}ÂèØ‰ª•ÂèÇ‰∏éÊõ¥Â§öËøêÂä®‰∫ÜÔºÅÂª∫ËÆÆÊØèÂ§©Êà∑Â§ñÊ¥ªÂä®2-3Â∞èÊó∂ÔºåÂåÖÊã¨Ë∑ëÊ≠•„ÄÅË∑≥Ë∑É„ÄÅÊîÄÁà¨Á≠â„ÄÇÂèØ‰ª•Áé©ÊªëÊ¢Ø„ÄÅÁßãÂçÉ„ÄÅÈ™ëÂ∞èËΩ¶Á≠âÔºåÈîªÁÇº${name}ÁöÑÂπ≥Ë°°ËÉΩÂäõÂíåÂçèË∞ÉÊÄß„ÄÇ`;
  }
};

const getDefaultSleepAdvice = (baby: BabyInfo): string => {
  const age = Number(baby.age);
  const name = baby.name;
  
  if (age < 6) {
    return `${name}Ëøô‰∏™Èò∂ÊÆµÈúÄË¶ÅÂÖÖË∂≥Áù°Áú†ÔºåÊØèÂ§©14-17Â∞èÊó∂„ÄÇÂª∫ËÆÆÂª∫Á´ãÂõ∫ÂÆöÁöÑÁù°ÂâçÁ®ãÂ∫èÔºåÂ¶ÇÊ¥óÊæ°„ÄÅÂñÇÂ•∂„ÄÅËΩªÊüîÈü≥‰πê„ÄÇ‰øùÊåÅÊàøÈó¥ÂÆâÈùô„ÄÅÊ∏©Â∫¶ÈÄÇÂÆúÔºåÂ∏ÆÂä©${name}Âª∫Á´ãÊòºÂ§úËäÇÂæã„ÄÇ`;
  } else if (age < 12) {
    return `${name}ÊØèÂ§©ÈúÄË¶Å12-15Â∞èÊó∂Áù°Áú†ÔºåÂåÖÊã¨2-3Ê¨°Â∞èÁù°„ÄÇÂª∫Á´ãËßÑÂæã‰ΩúÊÅØÔºåÂõ∫ÂÆöÁù°ËßâÂíåËµ∑Â∫äÊó∂Èó¥„ÄÇÁù°ÂâçÈÅøÂÖçËøáÂ∫¶Âà∫ÊøÄÔºåÂèØ‰ª•ËØªÁªòÊú¨„ÄÅÂî±ÊëáÁØÆÊõ≤Â∏ÆÂä©${name}ÂÖ•Áù°„ÄÇ`;
  } else if (age < 24) {
    return `${name}ÊØèÂ§©ÈúÄË¶Å11-14Â∞èÊó∂Áù°Áú†ÔºåÈÄöÂ∏∏1-2Ê¨°Â∞èÁù°„ÄÇÂª∫ËÆÆÊôö‰∏ä8-9ÁÇπÂÖ•Áù°ÔºåÊó©‰∏ä7-8ÁÇπËµ∑Â∫ä„ÄÇÁù°Ââç1Â∞èÊó∂ÈÅøÂÖçÊøÄÁÉàÊ¥ªÂä®ÔºåËê•ÈÄ†ÂÆâÈùôÁöÑÁù°Áú†ÁéØÂ¢É„ÄÇ`;
  } else {
    return `${name}ÊØèÂ§©ÈúÄË¶Å10-13Â∞èÊó∂Áù°Áú†ÔºåÂèØËÉΩËøòÈúÄË¶Å1Ê¨°ÂçàÁù°„ÄÇÂª∫ËÆÆÂõ∫ÂÆöÁù°ÂâçÁ®ãÂ∫èÔºåÂ¶ÇÂà∑Áâô„ÄÅËÆ≤ÊïÖ‰∫ã„ÄÇÈÅøÂÖçÁù°ÂâçÁúãÁîµÂ≠êÂ±èÂπïÔºå‰øùÊåÅÊàøÈó¥ÈªëÊöóÂÆâÈùôÔºåÂ∏ÆÂä©${name}ÂÖªÊàêËâØÂ•ΩÁù°Áú†‰π†ÊÉØ„ÄÇ`;
  }
};

// Generate a default suggestion based on assessment
const getDefaultSuggestion = (baby: BabyInfo, heightStatus: AssessmentStatus, weightStatus: AssessmentStatus): string => {
  const age = Number(baby.age);
  const name = baby.name;
  
  if (age < 12) {
    if (heightStatus === 'low' || weightStatus === 'low') {
      return `Âª∫ËÆÆ‰∏∫${name}Â¢ûÂä†‰ºòË¥®ËõãÁôΩË¥®ÊëÑÂÖ•ÔºåÁ°Æ‰øùÊØèÂ§©ÊúâË∂≥Â§üÁöÑÁù°Áú†Êó∂Èó¥ÔºåÂ§öÂÅö‰∫≤Â≠ê‰∫íÂä®„ÄÇÂèØ‰ª•Âí®ËØ¢ÂåªÁîüÂÖ≥‰∫é${name}ÈÖçÊñπÂ•∂ÁöÑËê•ÂÖªË°•ÂÖÖÊñπÊ°à„ÄÇ`;
    } else if (heightStatus === 'high' && weightStatus === 'high') {
      return `${name}ÂèëËÇ≤ËâØÂ•ΩÔºÅÁªßÁª≠‰øùÊåÅÊØç‰π≥ÊàñÈÖçÊñπÂ•∂ÁöÑÂñÇÂÖªËÆ°ÂàíÔºåÈÄêÊ≠•‰∏∫${name}Ê∑ªÂä†ËæÖÈ£üÔºåÊ≥®ÈáçÈ£üÁâ©Â§öÊ†∑ÊÄß„ÄÇÂ§öÂ∏¶${name}ËøõË°åÊà∑Â§ñÊ¥ªÂä®Ôºå‰øÉËøõÈ™®È™ºÂèëËÇ≤„ÄÇ`;
    } else {
      return `${name}ÂèëËÇ≤Ê≠£Â∏∏ÔºÅÂª∫ËÆÆÊ†πÊçÆÊúàÈæÑÈÄêÊ≠•‰∏∫${name}Ê∑ªÂä†ËæÖÈ£üÔºå‰øùÊåÅËßÑÂæãÁöÑ‰ΩúÊÅØÊó∂Èó¥ÔºåÊØèÂ§©ËøõË°åÈÄÇÂΩìÁöÑË∫´‰ΩìÊ¥ªÂä®Ôºå‰øÉËøõ${name}ÁöÑÊÑüÂÆòÂíåËøêÂä®ÂèëÂ±ï„ÄÇ`;
    }
  } else if (age < 36) {
    if (heightStatus === 'low') {
      return `Âª∫ËÆÆ‰∏∫${name}Â¢ûÂä†È´òÈíôÈ£üÁâ©ÁöÑÊëÑÂÖ•ÔºåÂ¶ÇÂ•∂Âà∂ÂìÅ„ÄÅË±ÜÂà∂ÂìÅÁ≠â„ÄÇÁ°Æ‰øù${name}ÊúâÂÖÖË∂≥ÁöÑÊà∑Â§ñÊ¥ªÂä®Êó∂Èó¥ÔºåÈÄÇÂ∫¶ÊôíÂ§™Èò≥ÂèØ‰øÉËøõÁª¥ÁîüÁ¥†DÂêàÊàêÔºåÊúâÂä©‰∫éÈíôÁöÑÂê∏Êî∂„ÄÇ`;
    } else if (weightStatus === 'high') {
      return `Ê≥®ÊÑèÊéßÂà∂${name}ÁöÑÁîúÈ£üÂíåÊ≤πËÖªÈ£üÁâ©ÊëÑÂÖ•ÔºåÂ¢ûÂä†Ëî¨ËèúÊ∞¥ÊûúÊØî‰æã„ÄÇÈºìÂä±${name}Â§öËøêÂä®ÔºåÂüπÂÖªÊ¥ªË∑ÉÁöÑÁîüÊ¥ªÊñπÂºèÔºåÂ¶ÇÁé©ÁêÉ„ÄÅË∑ëÊ≠•Á≠â„ÄÇ`;
    } else {
      return `${name}ÂèëËÇ≤ËâØÂ•ΩÔºÅÂª∫ËÆÆ‰∏∫${name}Êèê‰æõÂùáË°°È•ÆÈ£üÔºåÂåÖÊã¨ËõãÁôΩË¥®„ÄÅÁ¢≥Ê∞¥ÂåñÂêàÁâ©„ÄÅËÑÇËÇ™„ÄÅÁª¥ÁîüÁ¥†ÂíåÁüøÁâ©Ë¥®„ÄÇÂ§öÈô™${name}ËøõË°åÊà∑Â§ñÊ¥ªÂä®Âíå‰∫≤Â≠êÊ∏∏ÊàèÔºå‰øÉËøõË∫´‰ΩìÂíåÂ§ßËÑëÂèëËÇ≤„ÄÇ`;
    }
  } else {
    if (heightStatus === 'low' || weightStatus === 'low') {
      return `ÂÖ≥Ê≥®${name}ÁöÑÈ•ÆÈ£üÂ§öÊ†∑ÊÄßÔºåÁ°Æ‰øùÊëÑÂÖ•Ë∂≥Â§üÁöÑËê•ÂÖª„ÄÇÂèØ‰ª•ÈÄÇÂΩìÂ¢ûÂä†${name}ÁöÑËøêÂä®ÈáèÔºåÂ¶ÇË∑≥Áª≥„ÄÅÈ™ëËΩ¶Á≠âÔºå‰øÉËøõÁîüÈïøÊøÄÁ¥†ÂàÜÊ≥å„ÄÇ‰øùÊåÅËßÑÂæã‰ΩúÊÅØÔºåÁ°Æ‰øù${name}ÂÖÖË∂≥Áù°Áú†„ÄÇ`;
    } else if (weightStatus === 'high') {
      return `Âª∫ËÆÆÊéßÂà∂${name}È´òÁÉ≠ÈáèÈ£üÁâ©ÊëÑÂÖ•ÔºåÂ¢ûÂä†ËøêÂä®Èáè„ÄÇÈºìÂä±${name}ÂèÇ‰∏éÊúâË∂£ÁöÑ‰ΩìËÇ≤Ê¥ªÂä®ÔºåÂ¶ÇÊ∏∏Ê≥≥„ÄÅË∑≥ËàûÁ≠â„ÄÇÂáèÂ∞ëÂ±èÂπïÊó∂Èó¥ÔºåÂüπÂÖªÂÅ•Â∫∑ÁöÑÁîüÊ¥ª‰π†ÊÉØ„ÄÇ`;
    } else {
      return `${name}ÂèëËÇ≤Áä∂ÂÜµËâØÂ•ΩÔºÅÁªßÁª≠‰∏∫${name}‰øùÊåÅÂùáË°°È•ÆÈ£üÂíåÂÖÖË∂≥ËøêÂä®„ÄÇËøô‰∏™Èò∂ÊÆµÂèØ‰ª•ÂüπÂÖª${name}ÁöÑÁ§æ‰∫§ËÉΩÂäõÂíåÁã¨Á´ãÊÄßÔºåÂ§öÂèÇÂä†ÈõÜ‰ΩìÊ¥ªÂä®ÔºåÈîªÁÇºÁªºÂêàËÉΩÂäõ„ÄÇ`;
    }
  }
};